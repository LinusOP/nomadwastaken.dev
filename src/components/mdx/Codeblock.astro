---
interface Props {
  "data-language": string;
}

const code = await Astro.slots.render("default");
const { "data-language": lang } = Astro.props;
---

<div is="fancy-code-block" class="rounded-md bg-stone-900">
  <div class="flex items-center border-b border-stone-600 p-2">
    <span class="text-sm text-stone-400">{lang}</span>
    <button class="ml-auto" id=`code-copy`>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-copy"
        ><rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect><path
          d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
        ></path></svg
      >
    </button>
  </div>
  <div class="overflow-x-auto p-3 pt-2">
    <pre class=`not-prose`><Fragment set:html={code} /></pre>
  </div>
</div>

<script>
  class FancyCodeBlock extends HTMLDivElement {
    constructor() {
      super();

      const copyButton = this.querySelector("button")!;
      const codeBlock = this.querySelector("pre")!;

      copyButton.addEventListener("click", async () => {
        await navigator.clipboard.writeText(codeBlock.innerText);
      });
    }
  }

  customElements.define("fancy-code-block", FancyCodeBlock, {
    extends: "div",
  });
</script>
